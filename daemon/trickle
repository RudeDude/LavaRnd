#!/usr/bin/perl -wT
#
# trickle - trickle LavaRnd data into /dev/urandom
#
# @(#) $Revision: 10.1 $
# @(#) $Id: trickle,v 10.1 2003/08/18 06:44:37 lavarnd Exp $
#
# Copyright (c) 2000-2003 by Landon Curt Noll and Simon Cooper.
# All Rights Reserved.
#
# This is open software; you can redistribute it and/or modify it under
# the terms of the version 2.1 of the GNU Lesser General Public License
# as published by the Free Software Foundation.
#
# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General
# Public License for more details.
#
# The file COPYING contains important info about Licenses and Copyrights.
# Please read the COPYING file for details about this open software.
#
# A copy of version 2.1 of the GNU Lesser General Public License is
# distributed with calc under the filename COPYING-LGPL.  You should have
# received a copy with calc; if not, write to Free Software Foundation, Inc.
# 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
#
# For more information on LavaRnd: http://www.LavaRnd.org
#
# Share and enjoy! :-)

# requirements
#
use strict;
use LavaRnd::Return qw(random_data is_numeric is_integer);
use vars qw($opt_v $opt_b $count);
use Getopt::Long;
# We use the Retry method because we only want to trickle the data of
#	the highest quality into /dev/urandom.  Should the LavaRnd
#	service become unavailable, we will wait until it comes back.
use Time::HiRes qw(usleep);

# version - RCS style *and* usable by MakeMaker
#
my $VERSION = substr q$Revision: 10.1 $, 10;
$VERSION =~ s/\s+$//;

# my vars
#

# usage and help
#
my $usage = "$0 [-v lvl] [-b] [-n count] chunk_len period file";
my $help = qq{$usage

	-v lvl		verbose / debug level, 0 ==> no debug (def: 0)
	-b		form into background (def: do not fork)
	-n count	number of times to trickle, 0 ==> infinite (def: 0)
};
my %optctl = (
    "v=i" => \$opt_v,
    "b" => \$opt_b,
    "n=i" => \$count,
);



# function prototypes
#
sub error($$);
sub debug($$);


# setup
#
MAIN: {
    my $chunk_len;	# length to trickle at a time
    my $period;		# seconds between trickles
    my $file;		# name of /dev/urandom
    my $rand_data;	# LavaRnd data
    my $pid;		# fork pid return
    my $cycle_num;	# current trickle cycle number

    # setup
    #
    select(STDOUT);
    $| = 1;

    # set the defaults
    #
    $opt_v = 0;
    $count = 0;

    # parse args
    #
    if (!GetOptions(%optctl)) {
	error(1, "invalid command line\nusage: $help");
    }
    if (scalar @ARGV != 3) {
        error(2, "usage: $help");
    }

    # validate args
    #
    $chunk_len = $ARGV[0];
    if ($chunk_len !~ /^\d+$/ || $chunk_len <= 0) {
        error(3, "chunk_len: $chunk_len must be an integer > 0");
    } elsif ($chunk_len > 32768) {
        error(4, "chunk_len: $chunk_len of that size is a waste");
    }
    $period = $ARGV[1];
    if (! is_numeric($period) || $period < 0) {
        error(5, "period: $period must be > 0");
    }
    $file = $ARGV[2];
    # untaint file
    if ($file =~ m/^([A-Za-z0-9.\/_-]+)$/) {
	$file = $1;
    } else {
	error(6, "file: $file has strange characters in its path");
    }
    if (! -e $file) {
        error(7, "file: $file does not exist");
    } elsif (! -w $file) {
        error(8, "file: $file is not writable");
    }
    if (! is_integer($count) || $count < 0) {
        error(9, "count: $count must be >= 0");
    }

    # open output file
    #
    open URANDOM, ">$file" or error(10, "cannot open for writing: $file");
    select(URANDOM);
    $| = 1;
    select(STDOUT);

    # debug reporting of what we intend to do
    #
    if ($period > 0) {
	debug(1, "will trickle $chunk_len octets " .
		 "every $period second(s) into $file");
    } else {
	debug(1, "will trickle $chunk_len octets " .
		 "every cycle into $file");
    }
    if ($count <= 0) {
	debug(1, "will trickle forever");
    } else {
	debug(1, "will trickle for $count cycle(s)");
    }

    # if -b, form into background (and turn off debug) before trickle cycle
    #
    if (defined $opt_b) {
        $pid = fork();
	if (!defined $pid) {
	    error(11, "fork failed: $!");
	}
	if ($pid != 0) {
	    # parent - just exit
	    debug(1, "forked child pid: $pid, parent exiting now");
	    exit(0);
	}
	# child from now on
	$opt_v = 0;
    }

    # trickle cycle
    #
    do {

    	# fetch LavaRnd data
	#
	$rand_data = random_data($chunk_len);
	if (! defined $rand_data) {
	    debug(2, "failed to collect random data from lavapool");

	# if we have some data, write it to /dev/urandom
	#
	} else {
	    if (print URANDOM $rand_data) {
		debug(3, "wrote $chunk_len octets to $file");
	    } else {
		debug(3, "failed to write " . length($rand_data) .
			 " octets to $file");
	    }
	}

	# wait until end of the period
	#
	++$cycle_num;
	if (($period > 0) && ($count <= 0 || $cycle_num < $count)) {
	    debug(3, "trickel cycle: $cycle_num sleeping $period seconds");
	    usleep($period * 1000000.0);
	} else {
	    debug(3, "trickel cycle: $cycle_num");
	}

    } while ($count <= 0 || $cycle_num < $count);
    debug(1, "finised all trickel cycles");
    exit(0);
}


# error - report an error and exit
#
# given:
#       $exitval	exit code value
#       $msg		the message to print
#
sub error($$)
{
    my ($exitval, $msg) = @_;    # get args

    # parse args
    #
    if (!defined $exitval) {
	$exitval = 254;
    }
    if (!defined $msg) {
	$msg = "<<< no message supplied >>>";
    }
    if ($exitval =~ /\D/) {
	$msg .= "<<< non-numeric exit code: $exitval >>>";
	$exitval = 253;
    }

    # issue the error message
    #
    print STDERR "$0: $msg\n";

    # issue an error message
    #
    exit($exitval);
}


# debug - print a debug message is debug level is high enough
#
# given:
#       $min_lvl	minimum debug level required to print
#       $msg		message to print
#
sub debug($$)
{
    my ($min_lvl, $msg) = @_;    # get args

    # firewall
    #
    if (!defined $min_lvl) {
    	error(97, "debug called without a minimum debug level");
    }
    if ($min_lvl =~ /\D/) {
    	error(98, "debug called with non-numeric debug level: $min_lvl");
    }
    if ($opt_v < $min_lvl) {
	return;
    }
    if (!defined $msg) {
    	error(99, "debug called without a message");
    }

    # issue the debug message
    #
    print STDERR "DEBUG: $msg\n";
}

